name: "Lean Action - CI for Lean Projects"
description: |
  Standard CI for Lean projects. 
  Steps:
    - install elan
    - get Mathlib cache (optional, must be downstream of Mathlib)
    - lake build
    - lake test (optional)
    - lake exe runLinter (optional, must be downstream of Batteries)
    - check reservoir eligibility (optional)
inputs:
  test:
    description: |
      Run lake test.
      Allowed values: "true" or "false".
      If test input is not provided, tests will run by default.
    required: false
    default: "true"
  build-args:
    description: |
      Build arguments to pass to `lake build {args}`.
      For example, `build-args: "--quiet"` will run `lake build --quiet`.
    required: false
    default: ""
  use-mathlib-cache:
    description: |
      By default, `lean-action` attempts to automatically detect a Mathlib dependency and run `lake exe cache get` accordingly.
      Setting `use-mathlib-cache` will override automatic detection and run (or not run) `lake exe cache get`.
      Project must be downstream of Mathlib to use the Mathlib cache.
      Allowed values: "true" | "false" | "auto".
    required: false
    default: "auto"
  lint-module:
    description: |
      Run "lake exe runLinter" on the specified module.
      Project must be downstream of Batteries.
      Allowed values: name of module to lint.
      If lint-module input is not provided, linter will not run.
    required: false
    default: ""
  check-reservoir-eligibility:
    description: |
      Check if the repository is eligible for the reservoir.
      Allowed values: "true" or "false".
      If check-reservoir-eligibility input is not provided, the action will not check for reservoir eligibility.
    required: false
    default: "false"
  lean4checker:
    description: |
      Check environment with lean4checker.
      Lean version must be 4.8 or higher.
      The version of lean4checker is automatically detected using `lean-toolchain`.
      Allowed values: "true" or "false".
      If lean4checker input is not provided, the action will not check the environment with lean4checker.
    required: false
    default: "false"
  use-github-cache:
    description: |
      Enable GitHub caching.
      Allowed values: "true" or "false".
      If use-github-cache input is not provided, `lean-action` will use GitHub caching by default.
    required: false
    default: "true"
  lake-package-directory:
    description: |
      The directory where `lean-action` will look for a Lake package and run `lake build`, etc.
      Allowed values: a valid directory containing a Lake package.
      If lake-package-directory is not provided, `lean-action` will use the root directory of the repository by default.
    required: false
    default: "."
outputs:
  build-status:
    description: |
      The status of the `lake build` step.
      Allowed values: "SUCCESS" | "FAILURE" | "NOT_RUN".
    value: ${{ steps.set-output-parameters.outputs.build-status }}
  test-status:
    description: |
      The status of the `lake test` step.
      Allowed values: "SUCCESS" | "FAILURE" | "NOT_RUN".
    value: ${{ steps.set-output-parameters.outputs.test-status }}

runs:
  using: "composite"
  steps:
    - name: install elan
      run: |
        : Install Elan
        ${{ github.action_path }}/scripts/install_elan.sh
      shell: bash
      working-directory: ${{ inputs.lake-package-directory }}

    - uses: actions/cache@v4
      if: ${{ inputs.use-github-cache == 'true' }}
      with:
        path: ${{ inputs.lake-package-directory }}/.lake
        key: ${{ runner.os }}-lake-${{ github.sha }}
        # if no cache hit, fall back to the (latest) previous cache
        restore-keys: ${{ runner.os }}-lake-

    - name: detect mathlib
      # only detect Mathlib if the user did not provide the mathlib-cache input
      if: ${{ inputs.use-mathlib-cache == 'auto' }}
      id: detect-mathlib
      run: |
        : Detect Mathlib
        ${{ github.action_path }}/scripts/detect_mathlib.sh
      shell: bash
      working-directory: ${{ inputs.lake-package-directory }}

    - name: get mathlib cache
      # only get the cache if Mathlib was detected by detect-mathlib step or if the user explicitly set mathlib-cache to true
      if: ${{ steps.detect-mathlib.outputs.DETECTED_MATHLIB == 'true' || inputs.use-mathlib-cache == 'true' }}
      run: |
        : Get Mathlib Cache
        echo "::group::Mathlib Cache"
        lake exe cache get
        echo "::endgroup::"
        echo
      shell: bash
      working-directory: ${{ inputs.lake-package-directory }}

    - name: build ${{ github.repository }}
      id: build
      env: 
          BUILD_ARGS: ${{ inputs.build-args }}
      run: |
        : Lake Build
        ${{ github.action_path }}/scripts/lake_build.sh
      shell: bash
      working-directory: ${{ inputs.lake-package-directory }}

    - uses: actions/cache/save@v4
      if: ${{ inputs.use-github-cache == 'true' }}
      with:
        path: ${{ inputs.lake-package-directory }}/.lake
        key: ${{ runner.os }}-lake-${{ github.sha }}

    - name: test ${{ github.repository }}
      id: test
      if: ${{ inputs.test == 'true' }}
      run: |
        : Lake Test
        ${{ github.action_path }}/scripts/lake_test.sh
      shell: bash
      working-directory: ${{ inputs.lake-package-directory }}

    - name: lint ${{ github.repository }}
      # only run linter if the user provided a module to lint
      if: ${{ inputs.lint-module != '' }}
      run: |
        : Batteries Linter
        echo "::group::Lint"
        lake exe runLinter ${{ inputs.lint-module }}
        echo "::endgroup::"
        echo
      shell: bash
      working-directory: ${{ inputs.lake-package-directory }}

    - name: check reservoir eligibility
      if: ${{ inputs.check-reservoir-eligibility == 'true' }}
      # Passes in the private status, number of stars, and license id of the repository to check_reservoir_eligibility.sh script
      run: |
        : Check Reservoir Eligibility
        ${{ github.action_path }}/scripts/check_reservoir_eligibility.sh \
          "${{ github.event.repository.private }}"\
          "${{ github.event.repository.stargazers_count }}"\
          "${{ github.event.repository.license.spdx_id }}"
      shell: bash
      working-directory: ${{ inputs.lake-package-directory }}

    - name: check environment with lean4checker
      if: ${{ inputs.lean4checker == 'true' }}
      run: |
        : Check Environment with lean4checker
        ${{ github.action_path }}/scripts/run_lean4checker.sh
      shell: bash
      working-directory: ${{ inputs.lake-package-directory }}

    # This step sets the output parameters for the entirety of `lean-action`
    # based on the outputs of the previous steps
    - name: set output parameters
      id: set-output-parameters
      if: always() # always run this step even if previous steps fail
      env:
        BUILD_STATUS: ${{ steps.build.outputs.build-status }}
        TEST_STATUS: ${{ steps.test.outputs.test-status }}
      run: |
        : Set Output Parameters
        ${{ github.action_path }}/scripts/set_output_parameters.sh
      shell: bash
